// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/broadcast.struct.toml

#include "op-attrs/ops/broadcast.h"

namespace FlexFlow {
BroadcastAttrs::BroadcastAttrs(
    stack_vector<int, MAX_TENSOR_DIM> const &target_dims)
    : target_dims(target_dims) {}
bool BroadcastAttrs::operator==(BroadcastAttrs const &other) const {
  return std::tie(this->target_dims) == std::tie(other.target_dims);
}
bool BroadcastAttrs::operator!=(BroadcastAttrs const &other) const {
  return std::tie(this->target_dims) != std::tie(other.target_dims);
}
bool BroadcastAttrs::operator<(BroadcastAttrs const &other) const {
  return std::tie(this->target_dims) < std::tie(other.target_dims);
}
bool BroadcastAttrs::operator>(BroadcastAttrs const &other) const {
  return std::tie(this->target_dims) > std::tie(other.target_dims);
}
bool BroadcastAttrs::operator<=(BroadcastAttrs const &other) const {
  return std::tie(this->target_dims) <= std::tie(other.target_dims);
}
bool BroadcastAttrs::operator>=(BroadcastAttrs const &other) const {
  return std::tie(this->target_dims) >= std::tie(other.target_dims);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::BroadcastAttrs>::operator()(
    FlexFlow::BroadcastAttrs const &x) const {
  size_t result = 0;
  result ^= std::hash<stack_vector<int, MAX_TENSOR_DIM>>{}(x.target_dims) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::BroadcastAttrs
    adl_serializer<FlexFlow::BroadcastAttrs>::from_json(json const &j) {
  return {
      j.at("target_dims").template get<stack_vector<int, MAX_TENSOR_DIM>>()};
}
void adl_serializer<FlexFlow::BroadcastAttrs>::to_json(
    json &j, FlexFlow::BroadcastAttrs const &v) {
  j["__type"] = "BroadcastAttrs";
  j["target_dims"] = v.target_dims;
}
} // namespace nlohmann
