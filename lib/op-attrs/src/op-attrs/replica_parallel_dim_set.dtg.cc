// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/replica_parallel_dim_set.struct.toml
/* proj-data
{
  "generated_from": "20d8004e6f1e710688fe692b92dc2816"
}
*/

#include "op-attrs/replica_parallel_dim_set.dtg.h"

#include <sstream>

namespace FlexFlow {
ReplicaParallelDimSet::ReplicaParallelDimSet(int const &sum_degree,
                                             int const &discard_copy_degree)
    : sum_degree(sum_degree), discard_copy_degree(discard_copy_degree) {}
bool ReplicaParallelDimSet::operator==(
    ReplicaParallelDimSet const &other) const {
  return std::tie(this->sum_degree, this->discard_copy_degree) ==
         std::tie(other.sum_degree, other.discard_copy_degree);
}
bool ReplicaParallelDimSet::operator!=(
    ReplicaParallelDimSet const &other) const {
  return std::tie(this->sum_degree, this->discard_copy_degree) !=
         std::tie(other.sum_degree, other.discard_copy_degree);
}
bool ReplicaParallelDimSet::operator<(
    ReplicaParallelDimSet const &other) const {
  return std::tie(this->sum_degree, this->discard_copy_degree) <
         std::tie(other.sum_degree, other.discard_copy_degree);
}
bool ReplicaParallelDimSet::operator>(
    ReplicaParallelDimSet const &other) const {
  return std::tie(this->sum_degree, this->discard_copy_degree) >
         std::tie(other.sum_degree, other.discard_copy_degree);
}
bool ReplicaParallelDimSet::operator<=(
    ReplicaParallelDimSet const &other) const {
  return std::tie(this->sum_degree, this->discard_copy_degree) <=
         std::tie(other.sum_degree, other.discard_copy_degree);
}
bool ReplicaParallelDimSet::operator>=(
    ReplicaParallelDimSet const &other) const {
  return std::tie(this->sum_degree, this->discard_copy_degree) >=
         std::tie(other.sum_degree, other.discard_copy_degree);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::ReplicaParallelDimSet>::operator()(
    FlexFlow::ReplicaParallelDimSet const &x) const {
  size_t result = 0;
  result ^= std::hash<int>{}(x.sum_degree) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<int>{}(x.discard_copy_degree) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::ReplicaParallelDimSet
    adl_serializer<FlexFlow::ReplicaParallelDimSet>::from_json(json const &j) {
  return {j.at("sum_degree").template get<int>(),
          j.at("discard_copy_degree").template get<int>()};
}
void adl_serializer<FlexFlow::ReplicaParallelDimSet>::to_json(
    json &j, FlexFlow::ReplicaParallelDimSet const &v) {
  j["__type"] = "ReplicaParallelDimSet";
  j["sum_degree"] = v.sum_degree;
  j["discard_copy_degree"] = v.discard_copy_degree;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::ReplicaParallelDimSet>
    Arbitrary<FlexFlow::ReplicaParallelDimSet>::arbitrary() {
  return gen::construct<FlexFlow::ReplicaParallelDimSet>(gen::arbitrary<int>(),
                                                         gen::arbitrary<int>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(ReplicaParallelDimSet const &x) {
  std::ostringstream oss;
  oss << "<ReplicaParallelDimSet";
  oss << " sum_degree=" << x.sum_degree;
  oss << " discard_copy_degree=" << x.discard_copy_degree;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ReplicaParallelDimSet const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
